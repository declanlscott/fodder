name: Workflow

on: [push]

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-2
  UPSTASH_REDIS_URL: ${{ secrets.UPSTASH_REDIS_URL }}

jobs:
  ci:
    name: CI
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: |
            - recursive: true
            - cwd: ./frontend

      - name: Lint frontend
        run: pnpm lint
        working-directory: ./frontend

      - name: Format frontend
        run: pnpm format
        working-directory: ./frontend

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21.1"

      - name: Test restaurants lambda
        run: go test -v -json restaurants
        working-directory: ./backend/lambdas/restaurants

      - name: Test flavors lambda
        run: go test -v -json flavors
        working-directory: ./backend/lambdas/flavors

      - name: Test restaurant lambda
        run: go test -v -json restaurant
        working-directory: ./backend/lambdas/restaurant

      - name: Test flavor lambda
        run: go test -v -json flavor
        working-directory: ./backend/lambdas/flavor

  cd:
    name: CD
    runs-on: ubuntu-22.04
    needs: [ci]
    env:
      TF_VAR_domain: ${{ vars.DOMAIN }}
      TF_VAR_upstash_email: ${{ secrets.UPSTASH_EMAIL }}
      TF_VAR_upstash_api_key: ${{ secrets.UPSTASH_API_KEY }}
      TF_VAR_upstash_redis_region: ${{ vars.UPSTASH_REDIS_REGION }}
      TF_VAR_upstash_redis_user: ${{ secrets.UPSTASH_REDIS_USER }}
      TF_VAR_upstash_redis_password: ${{ secrets.UPSTASH_REDIS_PASSWORD }}
      TF_VAR_upstash_redis_port: ${{ secrets.UPSTASH_REDIS_PORT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21.1"

      - name: Build restaurants lambda
        run: ./build.sh
        working-directory: ./backend/lambdas/restaurants

      - name: Build flavors lambda
        run: ./build.sh
        working-directory: ./backend/lambdas/flavors

      - name: Build restaurant lambda
        run: ./build.sh
        working-directory: ./backend/lambdas/restaurant

      - name: Build flavor lambda
        run: ./build.sh
        working-directory: ./backend/lambdas/flavor

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: |
            - recursive: true
            - cwd: ./frontend

      - name: Build frontend
        run: pnpm build
        working-directory: ./frontend

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./terraform

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -input=false
        working-directory: ./terraform

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: ./terraform

      - name: Download AWS CLI
        if: ${{ env.ACT }}
        run: curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      - name: Unzip AWS CLI
        if: ${{ env.ACT }}
        run: unzip -q awscliv2.zip
      - name: Install AWS CLI
        if: ${{ env.ACT }}
        run: ./aws/install
      - name: AWS CLI version
        run: aws --version
      - name: AWS CLI Configure
        run: |
          aws configure set aws_access_key_id $(echo $AWS_ACCESS_KEY)
          aws configure set aws_secret_access_key $(echo $AWS_SECRET_ACCESS_KEY)
          aws configure set region $(echo $AWS_REGION)

      - name: Sync frontend with S3
        run: aws s3 sync dist/ s3://fodder.${{ vars.DOMAIN }}/ --delete
        working-directory: ./frontend

      - name: Invalidate frontend on CloudFront
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.FODDER_DISTRIBUTION_ID }} --paths "/**/*"
        env:
          AWS_PAGER: ""
