/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as FlavorsImport } from './routes/flavors'
import { Route as IndexImport } from './routes/index'
import { Route as RestaurantsSlugImport } from './routes/restaurants.$slug'
import { Route as FlavorsSlugImport } from './routes/flavors_.$slug'

// Create/Update Routes

const FlavorsRoute = FlavorsImport.update({
  id: '/flavors',
  path: '/flavors',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RestaurantsSlugRoute = RestaurantsSlugImport.update({
  id: '/restaurants/$slug',
  path: '/restaurants/$slug',
  getParentRoute: () => rootRoute,
} as any)

const FlavorsSlugRoute = FlavorsSlugImport.update({
  id: '/flavors_/$slug',
  path: '/flavors/$slug',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/flavors': {
      id: '/flavors'
      path: '/flavors'
      fullPath: '/flavors'
      preLoaderRoute: typeof FlavorsImport
      parentRoute: typeof rootRoute
    }
    '/flavors_/$slug': {
      id: '/flavors_/$slug'
      path: '/flavors/$slug'
      fullPath: '/flavors/$slug'
      preLoaderRoute: typeof FlavorsSlugImport
      parentRoute: typeof rootRoute
    }
    '/restaurants/$slug': {
      id: '/restaurants/$slug'
      path: '/restaurants/$slug'
      fullPath: '/restaurants/$slug'
      preLoaderRoute: typeof RestaurantsSlugImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/flavors': typeof FlavorsRoute
  '/flavors/$slug': typeof FlavorsSlugRoute
  '/restaurants/$slug': typeof RestaurantsSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/flavors': typeof FlavorsRoute
  '/flavors/$slug': typeof FlavorsSlugRoute
  '/restaurants/$slug': typeof RestaurantsSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/flavors': typeof FlavorsRoute
  '/flavors_/$slug': typeof FlavorsSlugRoute
  '/restaurants/$slug': typeof RestaurantsSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/flavors' | '/flavors/$slug' | '/restaurants/$slug'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/flavors' | '/flavors/$slug' | '/restaurants/$slug'
  id: '__root__' | '/' | '/flavors' | '/flavors_/$slug' | '/restaurants/$slug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FlavorsRoute: typeof FlavorsRoute
  FlavorsSlugRoute: typeof FlavorsSlugRoute
  RestaurantsSlugRoute: typeof RestaurantsSlugRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FlavorsRoute: FlavorsRoute,
  FlavorsSlugRoute: FlavorsSlugRoute,
  RestaurantsSlugRoute: RestaurantsSlugRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/flavors",
        "/flavors_/$slug",
        "/restaurants/$slug"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/flavors": {
      "filePath": "flavors.tsx"
    },
    "/flavors_/$slug": {
      "filePath": "flavors_.$slug.tsx"
    },
    "/restaurants/$slug": {
      "filePath": "restaurants.$slug.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
