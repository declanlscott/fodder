/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FlavorsRouteImport } from './routes/flavors'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RestaurantsSlugRouteImport } from './routes/restaurants.$slug'
import { Route as FlavorsSlugRouteImport } from './routes/flavors_.$slug'

const FlavorsRoute = FlavorsRouteImport.update({
  id: '/flavors',
  path: '/flavors',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RestaurantsSlugRoute = RestaurantsSlugRouteImport.update({
  id: '/restaurants/$slug',
  path: '/restaurants/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const FlavorsSlugRoute = FlavorsSlugRouteImport.update({
  id: '/flavors_/$slug',
  path: '/flavors/$slug',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/flavors': typeof FlavorsRoute
  '/flavors/$slug': typeof FlavorsSlugRoute
  '/restaurants/$slug': typeof RestaurantsSlugRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/flavors': typeof FlavorsRoute
  '/flavors/$slug': typeof FlavorsSlugRoute
  '/restaurants/$slug': typeof RestaurantsSlugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/flavors': typeof FlavorsRoute
  '/flavors_/$slug': typeof FlavorsSlugRoute
  '/restaurants/$slug': typeof RestaurantsSlugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/flavors' | '/flavors/$slug' | '/restaurants/$slug'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/flavors' | '/flavors/$slug' | '/restaurants/$slug'
  id: '__root__' | '/' | '/flavors' | '/flavors_/$slug' | '/restaurants/$slug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FlavorsRoute: typeof FlavorsRoute
  FlavorsSlugRoute: typeof FlavorsSlugRoute
  RestaurantsSlugRoute: typeof RestaurantsSlugRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/flavors': {
      id: '/flavors'
      path: '/flavors'
      fullPath: '/flavors'
      preLoaderRoute: typeof FlavorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/restaurants/$slug': {
      id: '/restaurants/$slug'
      path: '/restaurants/$slug'
      fullPath: '/restaurants/$slug'
      preLoaderRoute: typeof RestaurantsSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flavors_/$slug': {
      id: '/flavors_/$slug'
      path: '/flavors/$slug'
      fullPath: '/flavors/$slug'
      preLoaderRoute: typeof FlavorsSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FlavorsRoute: FlavorsRoute,
  FlavorsSlugRoute: FlavorsSlugRoute,
  RestaurantsSlugRoute: RestaurantsSlugRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
